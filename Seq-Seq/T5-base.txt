import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import torch
from torch.utils.data import DataLoader, Dataset
from transformers import T5Tokenizer, T5ForConditionalGeneration, AdamW

# Load your CSV file with semicolon as separator
data = pd.read_csv('CCNC.csv', sep=';')

# Convert labels from 'CC' and 'NC' to string format for T5 output
data['label'] = data['label'].map({'CC': 'concerning', 'NC': 'non-concerning'})

# Split the dataset into training and test sets
train_texts, test_texts, train_labels, test_labels = train_test_split(
    data['citation'].tolist(),
    data['label'].tolist(),
    test_size=0.2,
    random_state=42
)

# Initialize the T5 tokenizer
tokenizer = T5Tokenizer.from_pretrained('t5-base')


# Create a custom Dataset class
class CitationDataset(Dataset):
    def __init__(self, texts, labels):
        self.texts = texts
        self.labels = labels

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        # Prepare input as a text-to-text task
        input_text = f"classify: {self.texts[idx]}"
        target_text = self.labels[idx]

        encoding = tokenizer(input_text, padding='max_length', truncation=True, max_length=512, return_tensors='pt')
        target_encoding = tokenizer(target_text, padding='max_length', truncation=True, max_length=5,
                                    return_tensors='pt')

        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': target_encoding['input_ids'].flatten()
        }


# Create DataLoader for training and testing sets
train_dataset = CitationDataset(train_texts, train_labels)
test_dataset = CitationDataset(test_texts, test_labels)

train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=8)

# Initialize the T5 model for sequence-to-sequence classification
model = T5ForConditionalGeneration.from_pretrained('t5-base')

# Define the optimizer
optimizer = AdamW(model.parameters(), lr=1e-5)

# Training the model
model.train()
for epoch in range(3):  # You can increase the number of epochs
    for batch in train_loader:
        optimizer.zero_grad()
        input_ids = batch['input_ids']
        attention_mask = batch['attention_mask']
        labels = batch['labels']

        # Replace -100 with tokenizer.pad_token_id for padding labels (as T5 requires it)
        labels[labels == -100] = tokenizer.pad_token_id

        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()
    print(f'Epoch {epoch + 1} completed')

# Evaluation
model.eval()
predictions, true_labels = [], []

with torch.no_grad():
    for batch in test_loader:
        input_ids = batch['input_ids']
        attention_mask = batch['attention_mask']

        # Generate predictions
        outputs = model.generate(input_ids, attention_mask=attention_mask, max_length=5)

        # Decode the generated sequences
        preds = [tokenizer.decode(ids, skip_special_tokens=True) for ids in outputs]
        labels = [tokenizer.decode(ids, skip_special_tokens=True) for ids in batch['labels']]

        predictions.extend(preds)
        true_labels.extend(labels)

# Convert labels back to 'CC' and 'NC'
predictions = ['CC' if pred == 'concerning' else 'NC' for pred in predictions]
true_labels = ['CC' if label == 'concerning' else 'NC' for label in true_labels]

# Print classification report
print(classification_report(true_labels, predictions, target_names=['NC', 'CC']))
