import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import torch
from torch.utils.data import DataLoader, Dataset
from transformers import DistilBertTokenizer, DistilBertForSequenceClassification, AdamW

# Load your CSV file with semicolon as separator
data = pd.read_csv('CCNC.csv', sep=';')

# Map labels to integers
data['label'] = data['label'].map({'CC': 1, 'NC': 0})

# Split the dataset into training and test sets
train_texts, test_texts, train_labels, test_labels = train_test_split(
    data['citation'].tolist(),
    data['label'].tolist(),
    test_size=0.2,
    random_state=42
)

# Initialize the DistilBERT tokenizer
tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')


# Create a custom Dataset class
class CitationDataset(Dataset):
    def __init__(self, texts, labels):
        self.texts = texts
        self.labels = labels

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        # Tokenize and encode the text
        encoding = tokenizer(self.texts[idx],
                             padding='max_length',
                             truncation=True,
                             max_length=512,
                             return_tensors='pt')

        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': torch.tensor(self.labels[idx], dtype=torch.long)
        }


# Create DataLoader for training and testing sets
train_dataset = CitationDataset(train_texts, train_labels)
test_dataset = CitationDataset(test_texts, test_labels)

train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=8)

# Initialize the DistilBERT model for sequence classification
model = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased', num_labels=2)

# Define the optimizer
optimizer = AdamW(model.parameters(), lr=1e-5)

# Training the model
model.train()
for epoch in range(3):  # You can increase the number of epochs
    for batch in train_loader:
        optimizer.zero_grad()
        input_ids = batch['input_ids']
        attention_mask = batch['attention_mask']
        labels = batch['labels']

        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()
    print(f'Epoch {epoch + 1} completed')

# Evaluation
model.eval()
predictions, true_labels = [], []

with torch.no_grad():
    for batch in test_loader:
        input_ids = batch['input_ids']
        attention_mask = batch['attention_mask']

        outputs = model(input_ids, attention_mask=attention_mask)
        logits = outputs.logits
        preds = torch.argmax(logits, dim=1)

        predictions.extend(preds.numpy())
        true_labels.extend(batch['labels'].numpy())

# Print classification report
print(classification_report(true_labels, predictions, target_names=['NC', 'CC']))
